knitr::opts_chunk$set(fig.align = 'center', warning = FALSE, message = FALSE)
# put code here; e.g.
a <- mean(iris$Petal.Length)
library(tidyverse)
library(tinytex)
# Load a data set into your workspace
# social <- read_csv("data/social_HW1.csv")
summary(iris$Sepal.Length)
summary(iris$Sepal.Length[iris$Species == 'virginica'])
summary(iris$Sepal.Length[iris$Species == 'setosa'])
tapply(iris$Sepal.Length, iris$Species, summary)
range(iris$Sepal.Length)
# to get the number of observations in each category
table(iris$Species)
# to get the proportion of observations in each category
proportions(table(iris$Species))
#tidyverse version
mtcars <- mtcars %>%
mutate(mpg_by_cyl = mpg/cyl)
#base r (alternative) version
mtcars$mpg_by_cyl <- mtcars$mpg/mtcars$cyl
# if_else example using tidyverse
iris <- iris %>%
mutate(Width.Binary = if_else(Sepal.Width >= 3, 1, 0))
# if_else example using base r
iris$Width.Binary <- if_else(iris$Sepal.Width >= 3, 1, 0)
# case_when example using tidyverse
iris <- iris %>%
mutate(Width.3level = case_when(Sepal.Width < 2 ~ 1,
Sepal.Width >= 2 & Sepal.Width < 3 ~ 2,
Sepal.Width > 3 ~ 3))
# case_when example with character levels rather than numeric
iris <- iris %>%
mutate(Width.3level.char = case_when(Sepal.Width < 2 ~ "under 2",
Sepal.Width >= 2 & Sepal.Width < 3 ~ "2 to 3",
Sepal.Width > 3 ~ "more than 3"))
iris %>%
group_by(Species) %>%
summarize(mean.pl = mean(Petal.Length),
sd.pl   = sd(Petal.Length))
# tidyverse version
iris %>%
mutate(Species.Binary = ifelse(Species == "virginica",
"virginica", "other")) %>%
summarize(diff.Sepal.Length =
mean(Sepal.Length[Species.Binary == "virginica"])
- mean(Sepal.Length[Species.Binary == "other"]))
# base r (alternative) version
mean(iris$Sepal.Length[iris$Species=="virginica"])
-mean(iris$Sepal.Length[iris$Species!="virginica"])
# This code is too long, it goes past the line and will be cut off in a PDF
iris <- iris %>%
mutate(Width.3level = case_when(Sepal.Width < 2 ~ 1, Sepal.Width >= 2 & Sepal.Width < 3 ~ 2, Sepal.Width > 3 ~ 3))
# To fix this, insert carriage returns, R will ignore them
iris <- iris %>%
mutate(Width.3level = case_when(Sepal.Width < 2 ~ 1,
Sepal.Width >= 2 & Sepal.Width < 3 ~ 2,
Sepal.Width > 3 ~ 3))
unique(iris$Species)
tapply(iris$Sepal.Length, iris$Species, mean)
# Univariate summary by groups
tapply(iris$Sepal.Length, iris$Species, summary)
iris %>%
group_by(Species) %>%
summarize(mean.SL = mean(Sepal.Length))
tapply(iris$Sepal.Length[iris$Petal.Width > 0.5],
iris$Species[iris$Petal.Width > 0.5], mean)
# create and save the recoded group variable
iris_new <- iris %>%
mutate(Species.Binary = ifelse(Species == "virginica", "virginica", "other"),
Width.3level.char = ntile(Sepal.Width, 3))
# calculate means for each group of interest
means <- tapply(iris_new$Sepal.Length, iris_new$Species.Binary, mean)
# look at those means
means
# take the difference between elements of that vector of means
means[2] - means[1]
quantile(iris$Petal.Length, probs = c(0, 0.10, 0.5, 0.90, 1))
quantile(iris$Petal.Length[iris$Species == 'versicolor'],
probs = c(0, 0.10, 0.5, 0.90, 1)) -
quantile(iris$Petal.Length[iris$Species == 'virginica'],
probs = c(0, 0.10, 0.5, 0.90, 1))
# counts
table(iris$Species, iris$Width.3level.char)
# what happens if you switch the order of the inputs?
# joint distribution proportions
proportions(table(iris$Species, iris$Width.3level.char))
# marginal distribution proportions
#row proportions
proportions(table(iris$Species, iris$Width.3level.char), margin = 1)
#col proportions
proportions(table(iris$Species, iris$Width.3level.char), margin = 2)
my_data <- c(NA, 1, 2, 3, NA)
mean(my_data) # returns NA
mean(my_data, na.rm = TRUE) # returns 2
tibble(x = c(NA, 1, 2, 3, 4),
y = c(1:5)) %>%
summarize(mean_x = mean(x, na.rm = TRUE),
median_x = median(x, na.rm = T))
tibble(x = c(NA, 1, 2, 3, 4),
y = c(1:5)) %>%
summarize(mean_x = mean(x),
median_x = median(x))
# making a small example data set
example <- tibble(x = c(NA, 1, 2, 3, 4),
y = c(1:5))
example
# filtering to a data set that drops all rows with na data in the x column
no_na_example <- example %>%
filter(!is.na(x))
no_na_example
# BAD EXAMPLE: NEVER FOLLOW THIS
# filtering to a data set that drops all rows with na data in the x column
no_na_example2 <- example %>%
filter(x != NA)
no_na_example2
my_value <- mean(c(1:200))
my_value
iris %>%
ggplot(aes(y = Sepal.Length)) + #notice the + rather than %>%
geom_boxplot()
boxplot(iris$Sepal.Length)
iris %>%
ggplot(aes(y = Sepal.Length, x = Species)) +
geom_boxplot()
##BAD EXAMPLE: The code below won't work because
##aes reads the Width.Binary variable as continuous (literal 0s and 1s)
#iris %>%
# ggplot(aes(y = Sepal.Length, x = Width.Binary)) +
#geom_boxplot()
##GOOD EXAMPLE: The code below calls the Width.Binary variable as a factor, so it works!
iris %>%
ggplot(aes(y = Sepal.Length, x = factor(Width.Binary))) +
geom_boxplot()
boxplot(Sepal.Length ~ Species, iris)
boxplot(Sepal.Length ~ Width.Binary, iris)
iris %>%
ggplot(aes(x = Sepal.Length)) +
geom_histogram()
hist(iris$Sepal.Length)
iris %>%
ggplot(aes(x = Sepal.Length)) +
geom_histogram() +
facet_wrap(~Species)
iris %>%
ggplot(aes(x = Sepal.Length)) +
geom_histogram() +
facet_wrap(~Width.Binary)
hist(iris$Sepal.Length, freq = FALSE)
iris %>%
ggplot(aes(x = Sepal.Length)) +
geom_histogram(aes(y = 100*(..count..)/sum(..count..)))
ggplot(mpg, aes(x = class)) +
geom_bar()
ggplot(mpg, aes(x = class, y = (..count..)/sum(..count..))) +
geom_bar()
#let's get the Speal.Length quartiles for each iris Species using tapply
sl.quantiles <- tapply(iris$Sepal.Length, iris$Species, quantile, probs = c(0, 0.25, 0.5, 0.75, 1))
sl.quantiles
#now lets take the difference between two species' quartiles
sl.quantiles$versicolor - sl.quantiles$setosa
iris %>%
summarize_at(vars(contains('Length')), funs(mean, sd))
iris %>%
summarize_at(c("Sepal.Length", "Petal.Length"), funs(mean, sd))
#basic figure
iris %>%
ggplot(aes(x = Species, y = Sepal.Length)) +
geom_boxplot()
#adding axes labels and titles
iris %>%
ggplot(aes(x = Species, y = Sepal.Length)) +
geom_boxplot() +
labs(x = 'Species', #add x-axis label
y = 'Sepal Length', # add y-axis label
title = 'Sepal Length Distributions by Species') + # add a figure title
#make the plotting background look nice!
theme_minimal() +
#you can also use theme_classic(), theme_bw(), theme_void(), theme_dark(), and others
#change title location
theme(plot.title = element_text(hjust = 0.5, vjust = 2))
#hjust = 0.5 centers the title, vjust = 2 moves the title up
#single color fill and outline
iris %>%
ggplot(aes(x = Petal.Length)) +
geom_histogram(fill = 'light blue', color = "red")
#fill changes the color inside, color changes the outline or point color
#color fill by category
iris %>%
ggplot(aes(x = Species, y = Sepal.Length, fill = Species)) +
#you can can also use the 'color' option in aes to change the outline color by category
geom_boxplot()
iris %>% group_by(Species) %>% summarize_at(c("Sepal.Length", "Petal.Width"), funs(median, mean, IQR, sd, min, max))
iris %>%
group_by(Species) %>%
summarize_at(c("Sepal.Length", "Petal.Width"),
funs(median, mean, IQR, sd, min, max))
iris %>%
ggplot(aes(x = Sepal.Length, fill = factor(Species), alpha = 0.5)) +
geom_histogram(position = "identity")
##ntile here just makes the ordinal version of Sepal length; you don't need it if your variable is already categorical/ordinal
iris %>%
mutate(sepal.length.ntile = ntile(Sepal.Length, 5)) %>%
ggplot(aes(x = Species, fill = factor(sepal.length.ntile))) +
geom_bar(position = 'dodge2')
iris %>%
ggplot(aes(x = Sepal.Length, y = Petal.Width)) +
geom_point()
iris %>%
ggplot(aes(x = Sepal.Length, y = Petal.Width)) +
geom_point() +
facet_wrap(~Species)
iris %>%
ggplot(aes(x = Sepal.Length, y = Petal.Width, color = Species)) +
geom_point()
iris %>%
mutate(long_petals = if_else(Petal.Length > median(Petal.Length), 1, 0)) %>%
ggplot(aes(x = Sepal.Length, y = Sepal.Width, shape = factor(long_petals), alpha = 0.5)) +
geom_point(color = 'dark green')
cor(iris$Sepal.Length, iris$Sepal.Width)
summary(iris$Sepal.Length)
sd(iris$Sepal.Length)
iris['Sepal.Length.z.score'] <- (iris$Sepal.Length - mean(iris$Sepal.Length))/sd(iris$Sepal.Length)
mean(iris$Sepal.Length.z.score)
sd(iris$Sepal.Length.z.score)
summary(iris$Sepal.Length.z.score)
mean(iris$Sepal.Length.z.score > 1)
mean(abs(iris$Sepal.Length.z.score) > 1)
airquality %>%
summarize_all(~mean(is.na(.)))
# Base R alternative
dim(airquality)
summary(airquality)
airquality_clean = airquality %>%
select(-c(Ozone)) %>% # drops the ozone column
na.omit() # removes any rows with missing data
airquality_clean %>% summarize_all(~mean(is.na(.)))
# Base R alternative
dim(airquality_clean)
summary(airquality_clean)
iris %>%
select_if(is.numeric) %>%
cor()
reg1 <- lm(Sepal.Length ~ Petal.Width, data = iris)
summary(reg1)
summary(resid(reg1))
boxplot(resid(reg1))
summary(fitted(reg1))
boxplot(fitted(reg1))
iris %>%
ggplot(aes(x = Petal.Width, y = resid(reg1))) +
geom_point() +
geom_hline(yintercept = 0, color = "red")
iris %>%
ggplot(aes(x = fitted(reg1), y = resid(reg1))) +
geom_point() +
geom_hline(yintercept = 0, color = "red")
iris %>%
ggplot(aes(x = Petal.Width, y = Sepal.Length)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue")
predict(reg1, newdata = tibble(Petal.Width = 2))
car_mod1 = lm(mpg ~ wt + vs, data = mtcars)
summary(car_mod1)
car_mod1$coef
#since a v-shaped engine is coded as 0, the regression model intercept is the intercept for the v-shaped engine line
int_vshape = car_mod1$coef['(Intercept)']
#since a straight engine is coded as 1, the intercept for the straight engine line
#is the regression intercept PLUS the coefficient on the dichotomous variable
int_straight = car_mod1$coef['(Intercept)'] + car_mod1$coef['vs']
#since there is no interaction effect, both lines have the same slope
slope = car_mod1$coef['wt']  ##coefficient on the continuous variable
mtcars %>%
ggplot(aes(y = mpg, x = wt, color = factor(vs))) +
geom_point() +
geom_abline(aes(intercept = int_vshape, slope = slope, color = '0')) +  #regression line for v-shaped engines
geom_abline(aes(intercept = int_straight, slope = slope, color = '1'))  #regression line for straight engines
#note that here the 'color' argument in the `geom_abline` matches the label from the dichotomous variable column
car_mod2 = lm(mpg ~ wt + vs + wt*vs, data = mtcars)
summary(car_mod2)
car_mod2$coef
##since a v-shaped engine is coded as 0...
#the intercept for the v-shaped engine line is just the regression model intercept
int_vshape2 = car_mod2$coef['(Intercept)']
#the slope for the v-shaped engine line is just the regression model coefficient on the continuous variable (wt)
slope_vshape2 = car_mod2$coef['wt']
##since a straight engine is coded as 1...
#the intercept for the straight engine line is the regression intercept PLUS the coefficient on the dichotomous variable
int_straight2 = car_mod2$coef['(Intercept)'] + car_mod2$coef['vs']
#the slope for the straight engine line is the coefficient on the continuous variable PLUS the coefficient on the interaction term
slope_straight2 = car_mod2$coef['wt'] + car_mod2$coef['wt:vs']
mtcars %>%
ggplot(aes(y = mpg, x = wt, color = factor(vs))) +
geom_point() +
geom_abline(aes(intercept = int_vshape2, slope = slope_vshape2, color = '0')) +  #regression line for v-shaped engines
geom_abline(aes(intercept = int_straight2, slope = slope_straight2, color = '1'))  #regression line for straight engines
car_mod3 <- lm(mpg ~ wt + factor(cyl), data = mtcars)
summary(car_mod3)
car_mod4 <- lm(mpg ~ wt + factor(cyl) + wt*factor(cyl), data = mtcars)
summary(car_mod4)
car_mod3$coef
# intercepts for each line
int_4 = car_mod3$coef['(Intercept)']
int_6 = car_mod3$coef['(Intercept)'] + car_mod3$coef['factor(cyl)6']
int_8 = car_mod3$coef['(Intercept)'] + car_mod3$coef['factor(cyl)8']
#single slope
slope = car_mod3$coef['wt']
mtcars %>%
ggplot(aes(y = mpg, x = wt, color = factor(cyl))) +
geom_point() +
geom_abline(aes(intercept = int_4, slope = slope, color = '4')) +  #regression line for 4-cylinder
geom_abline(aes(intercept = int_6, slope = slope, color = '6')) + #regression line for 6-cylinder
geom_abline(aes(intercept = int_8, slope = slope, color = '8'))  #regression line for 6-cylinder
car_mod4$coef
# intercepts for each line
int_4x = car_mod4$coef['(Intercept)']
int_6x = car_mod4$coef['(Intercept)'] + car_mod4$coef['factor(cyl)6']
int_8x = car_mod4$coef['(Intercept)'] + car_mod4$coef['factor(cyl)8']
# slopes for each line
slope_4x = car_mod4$coef['wt']
slope_6x = car_mod4$coef['wt'] + car_mod4$coef['wt:factor(cyl)6']
slope_8x = car_mod4$coef['wt'] + car_mod4$coef['wt:factor(cyl)8']
mtcars %>%
ggplot(aes(y = mpg, x = wt, color = factor(cyl))) +
geom_point() +
geom_abline(aes(intercept = int_4x, slope = slope_4x, color = '4')) +  #regression line for 4-cylinder
geom_abline(aes(intercept = int_6x, slope = slope_6x, color = '6')) + #regression line for 6-cylinder
geom_abline(aes(intercept = int_8x, slope = slope_8x, color = '8'))  #regression line for 6-cylinder
mean(rnorm(10, 0, 1))
mean(rnorm(10, 0, 1))
mean(rnorm(10, 0, 1))
mean(rnorm(10, 0, 1))
mean(rnorm(10, 0, 1))
mean(rnorm(10, 0, 1))
set.seed(4)
mean(rnorm(10, 0, 1))
set.seed(4)
mean(rnorm(10, 0, 1))
set.seed(4)
mean(rnorm(10, 0, 1))
set.seed(4)
mean(rnorm(10, 0, 1))
set.seed(4)
mean(rnorm(10, 0, 1))
set.seed(4)
mean(rnorm(10, 0, 1))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
data <- rnorm(100, 0, 1)
mean(data)
data <- rnorm(100, 0, 1)
mean(data)
data <- rnorm(100, 0, 1)
mean(data)
set.seed(99)
data <- rnorm(100, 0, 1)
mean(data)
set.seed(99)
data <- rnorm(100, 0, 1)
mean(data)
library(tidyverse)
water <- read.csv("data/water.csv") %>%
mutate(control = ifelse(group == 1,1,0))
View(water)
data <- rnorm(100, 0, 1)
mean(data)
data <- rnorm(100, 0, 1)
mean(data)
set.seed(99)
data <- rnorm(100, 0, 1)
mean(data)
set.seed(1988) # <-- This will make your Rmd have the same output every time.
# Change the number in the command in line 42 when you do this HW (just change it once and keep it at
# that value)
library(tidyverse)
water <- read.csv("data/water.csv") %>%
mutate(control = ifelse(group == 1,1,0))
View(water)
mean(water$WATER_2006)
sd(water$WATER_2006)
mean(water$WATER_2006)
sd(water$WATER_2006)
mean(water$control)
mean(water$WATER_2006)
sd(water$WATER_2006)
mean(water$control)
set.seed(1988)
samp1 <- sample_n(water, 900)
mean(samp1$WATER_2006)
sd(samp1$WATER_2006)
mean(samp1$control)
set.seed(1988)
samp1 <- sample_n(water, 900)
mean(samp1$WATER_2006)
sd(samp1$WATER_2006)
mean(samp1$control)
set.seed(1988)
samp1 <- sample_n(water, 900)
mean(samp1$WATER_2006)
sd(samp1$WATER_2006)
mean(samp1$control)
#' SimulateSamplingDistribution: draws specified number of samples from a dataframe representing a population; calculates a specified function of a specific variable for each sample
#'
#' @param population_data dataframe (or tibble) containing population data
#' @param number_samples number of samples to draw
#' @param sample_size number of observations to sample for each draw
#' @param variable_name variable of interest (e.g. a column within population_data)
#' @param statistic a statistic to calculate of the sampled variable of interest (e.g., mean, sd, median)
#' @param seed fixes the samples so that the same samples are drawn each time. this is set to a default value of 10 but can be changed if desired
#'
#' @return number_samples length vector of statistics for variable_name. this represents the sampling distribution of the statistics for samples of size sample_size
SimulateSamplingDistribution <- function(population_data, number_samples,
sample_size, variable_name,
statistic, seed = 10) {
set.seed(seed)
data_samples <- map(1:number_samples, ~sample_n(population_data, sample_size))
res <- unlist(map(data_samples, ~statistic(.x[[variable_name]])))
return(res)
}
#Uncomment and fill in each of the inputs below:
repsamp.water.900 <- SimulateSamplingDistribution(population_data = water,
number_samples = 1000,
sample_size = 900,
variable_name =  "WATER_2006",
statistic = mean,
seed = 10)
hist(repsamp.water.900)
summary(repsamp.water.900)
sd(repsamp.water.900)
pop_mean = mean(water$WATER_2006)
sd(water$WATER_2006)
mean(water$control)
pop_mean = mean(water$WATER_2006)
sd(water$WATER_2006)
mean(water$control)
mean(water$WATER_2006)
sd(water$WATER_2006)
mean(water$control)
mean(water$WATER_2006)
sd(water$WATER_2006)
mean(water$control)
se <- sd(repsamp.water.900)
pop_mean = mean(water$WATER_2006)
mean(repsamp.water.900 > pop_mean - se & repsamp.water.900 < pop_mean + se)
mean(repsamp.water.900 > pop_mean - 2*se & repsamp.water.900 < pop_mean + 2*se)
## Uncomment the below chunk and fill in the numbers!
repsamp.control.900 <- SimulateSamplingDistribution(population_data = water,
number_samples = 1000,
sample_size = 900,
variable_name = "control",
statistic = mean,
seed = 10)
hist(repsamp.control.900)
summary(repsamp.control.900)
sd(repsamp.control.900)
